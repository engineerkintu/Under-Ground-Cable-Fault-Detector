C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.exe ..\main.c ROM(SMALL) BROWSE DEBUG CODE OBJECTEXTEND PREPRINT OBJECT(main
                    -.OBJ)

line level    source

   1          /* Main.c file generated by New Project wizard
   2           *
   3           * Created:   Mon Apr 25 2016
   4           * Processor: 80C51
   5           * Compiler:  Keil for 8051
   6           */
   7          
   8          #include <reg51.h>
   9          #include <stdio.h>
  10          
  11          
  12           
  13          //Constants
  14          #define E_Delay       250       
  15           
  16          //Function Declarations    for LCD
  17          void delay_sec(unsigned int);
  18          void __delay_us(unsigned int);    
  19          void InitLCD(void);
  20          void WriteCommandToLCD(int);
  21          void WriteDataToLCD(char);
  22          void WriteStringToLCD(const char*);
  23          void ClearLCDScreen(void);
  24           
  25          // Function Declarations for ADC
  26          void InitADC(void);
  27          unsigned char ReadADC(unsigned char);
  28          void Display(unsigned char);
  29          
  30          // Define ADC0808 Channels
  31          #define AN0        0
  32          #define AN1        1
  33          #define AN2        2
  34          #define AN3        3
  35          #define AN4        4
  36          #define AN5        5
  37          #define AN6        6
  38          #define AN7        7
  39           
  40          // Define Pins
  41          sbit Add_A = P2^0;     // Address Pin A
  42          sbit Add_B = P2^1;     // Address Pin B
  43          sbit Add_C = P2^2;     // Address Pin C
  44          sbit ALE   = P2^3;     // Address Latch Enable
  45          sbit EOC   = P2^4;     // End Of Conversion
  46          sbit OE    = P2^5;     // Output Enable
  47          sbit START = P2^6;     // Start Conversion
  48          sbit CLK   = P2^7;     // Clock for AD0808
  49          
  50          //Defines Pins
  51          sbit RS = P3^6;
  52          sbit E  = P1^0;
  53          
  54          // Define Data Bus
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 2   

  55          #define Data_Bus     P0
  56          #define HalfCycleDelay        10        // usecs
  57          
  58          sbit RELAY1 = P1^2;
  59          sbit RELAY2 = P1^3;
  60          sbit RELAY3 = P1^1;
  61          
  62          //unsigned char Buff[3] = 0;
  63          
  64          void main(void)
  65           { 
  66   1         
  67   1              unsigned char ADC_Value = 0;         // To capture ADC value
  68   1          unsigned char Digit[3] = { 0,0,0 };    // To make digits to display on LCD
  69   1              
  70   1              
  71   1       
  72   1          InitADC();                            // Initialize ADC
  73   1          InitLCD();                            // Initialize LCD display
  74   1          WriteStringToLCD("Starting...");    // Show Welcome Message
  75   1          delay_sec(1);                        // 1 Sec delay
  76   1              ClearLCDScreen();
  77   1              WriteStringToLCD("***Welcome***");
  78   1              delay_sec(2);
  79   1              ClearLCDScreen();
  80   1              WriteStringToLCD("Fault Locator 1");
  81   1              delay_sec(2);
  82   1          ClearLCDScreen();
  83   1         while(1)
  84   1         { 
  85   2                 RELAY1 = 1;
  86   2                 delay_sec(1);
  87   2                  ADC_Value = ReadADC(AN1);        // Read ADC value from Channel 
  88   2                      WriteStringToLCD("R: ");                // Display string
  89   2                  Display(ADC_Value);
  90   2              delay_sec(2);
  91   2                  ClearLCDScreen();
  92   2                  RELAY1 = 0;
  93   2                 
  94   2                 RELAY2 = 1;
  95   2                 delay_sec(1);
  96   2                 WriteStringToLCD("B: ");
  97   2                  ADC_Value = ReadADC(AN1);
  98   2                 Display(ADC_Value);
  99   2                 delay_sec(2);
 100   2                 ClearLCDScreen();
 101   2                 RELAY2 = 0;
 102   2                 
 103   2                 RELAY3 = 1;
 104   2                 delay_sec(1);
 105   2                 WriteStringToLCD("Y: ");
 106   2                 ADC_Value = ReadADC(AN1);
 107   2                 Display(ADC_Value);
 108   2                 delay_sec(2);
 109   2                 ClearLCDScreen();
 110   2                 RELAY3 = 0;
 111   2                 
 112   2                
 113   2         } 
 114   1        
 115   1            
 116   1       }
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 3   

 117           //////////////////End of Main Function //////////////////
 118           
 119          //Function for Initialization of ADC0
 120          void InitADC(void)
 121              {
 122   1              Add_A = 0;          // Make output
 123   1              Add_B = 0;          // Make output 
 124   1              Add_C = 0;          // Make output
 125   1              ALE   = 0;          // Make output
 126   1              EOC   = 1;          // Make input
 127   1              OE    = 0;          // Make output
 128   1              START = 0;          // Make output
 129   1              CLK   = 0;          // Make output
 130   1              Data_Bus = 0xFF;    // Make Inputs    
 131   1          }
 132           
 133          unsigned char ReadADC(unsigned char Channel)
 134              {
 135   1              unsigned int i = 0;
 136   1              unsigned int ADC_value = 0;
 137   1       
 138   1              /*Selecting analog Channel by providing respective 
 139   1              bits to A,B,C addresses*/
 140   1              switch(Channel)
 141   1              {
 142   2              case AN0: Add_C = 0;  Add_B = 0;  Add_A = 0; break;
 143   2              case AN1: Add_C = 0;  Add_B = 0;  Add_A = 1; break;
 144   2              case AN2: Add_C = 0;  Add_B = 1;  Add_A = 0; break;
 145   2              case AN3: Add_C = 0;  Add_B = 1;  Add_A = 1; break;
 146   2              case AN4: Add_C = 1;  Add_B = 0;  Add_A = 0; break;
 147   2              case AN5: Add_C = 1;  Add_B = 0;  Add_A = 1; break;
 148   2              case AN6: Add_C = 1;  Add_B = 1;  Add_A = 0; break;
 149   2              case AN7: Add_C = 1;  Add_B = 1;  Add_A = 1; break;
 150   2              }       
 151   1       
 152   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 153   1              ALE = 1;                // Enable Address Latch
 154   1              CLK = 1;                 // Make CLK High
 155   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 156   1              CLK = 0;                 
 157   1              START = 1;                // Start ADC Conversion
 158   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 159   1              CLK = 1;                 // Make CLK High
 160   1              ALE = 0;                // Disable Address Latch
 161   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 162   1              CLK = 0;                 // Make CLK Low
 163   1              START = 0;                // Complete the start pulse
 164   1       
 165   1              for(i=0;i<2000;i++)
 166   1              {
 167   2                  CLK = !CLK;            // Toggle Clock
 168   2                  __delay_us(HalfCycleDelay);    // 250kHz Frequency
 169   2                  if(!EOC)              // Wait for EOC to be low
 170   2                  break;
 171   2              }
 172   1       
 173   1              for(i=0;i<2000;i++)
 174   1              {
 175   2                  CLK = !CLK;            // Toggle Clock
 176   2                  __delay_us(HalfCycleDelay);    // 250kHz Frequency
 177   2                   if(EOC)                // Wait for EOC to be High    
 178   2                  break;
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 4   

 179   2              }
 180   1       
 181   1              CLK = 0;                 // Make CLK Low
 182   1              OE = 1;                    // Enable Output
 183   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 184   1              CLK = 1;                 // Make CLK High
 185   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 186   1              CLK = 0;                 // Make CLK Low
 187   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 188   1              CLK = 1;                 // Make CLK High
 189   1              ADC_value = Data_Bus;            // Read value
 190   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 191   1              OE = 0;                    // Disable Output
 192   1              CLK = 0;                 // Make CLK Low
 193   1              __delay_us(HalfCycleDelay);        // 250kHz Frequency
 194   1              return ADC_value;                // Return ADC value
 195   1          }
 196           
 197          // Function for approximate delay in Secs.
 198          void delay_sec(unsigned int d)
 199              {
 200   1         unsigned int i;
 201   1         for(i=0;i<(d*20);i++)
 202   1                 __delay_us(50000);
 203   1          }
 204           
 205          // Function for approximate delay in given uSecs.
 206          void __delay_us(unsigned int d)
 207              {
 208   1         unsigned int i, limit;
 209   1         limit = d/15;
 210   1         for(i=0;i<limit;i++);
 211   1          }
 212           
 213          void ToggleEpinOfLCD(void)
 214              {
 215   1          E = 1;                // Give a pulse on E pin
 216   1          __delay_us(E_Delay);  // so that LCD can latch the
 217   1          E = 0;                // data from data bus
 218   1          __delay_us(E_Delay);     
 219   1          }
 220           
 221          //Function for Writing Data to LCD 
 222          void WriteDataToLCD(char t)
 223              {
 224   1         RS = 1;             // This is data
 225   1       
 226   1         P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 227   1         P1 |= (t&0xF0);     // Write Upper nibble of data
 228   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
 229   1       
 230   1         P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 231   1         P1 |= ((t<<4)&0xF0);// Write Lower nibble of data
 232   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
 233   1          }
 234           
 235          //Function for Writing COmmand to LCD
 236          void WriteCommandToLCD(int z)
 237              {
 238   1         RS = 0;             // This is command
 239   1       
 240   1         P1 &= 0x0F;           // Make P1.4 to P1.7 zero
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 5   

 241   1         P1 |= (z&0xF0);     // Write Upper nibble of data
 242   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
 243   1       
 244   1         P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 245   1         P1 |= ((z<<4)&0xF0);// Write Lower nibble of data
 246   1         ToggleEpinOfLCD();  // Toggle E pin to send data 
 247   1                      
 248   1              
 249   1          }
 250           
 251          //Writing Function for Initializaing of LCD 
 252          void InitLCD(void)
 253              {
 254   1          RS = 0;             // Make pin zero
 255   1          E  = 0;            // Make Pin zero                    
 256   1       
 257   1        ///////////// Reset process from datasheet /////////
 258   1           __delay_us(15000);
 259   1              
 260   1              
 261   1              
 262   1       
 263   1           P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 264   1           P1 |= 0x30;           // Write 0x3
 265   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
 266   1       
 267   1           __delay_us(4500);
 268   1       
 269   1           P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 270   1           P1 |= 0x30;           // Write 0x3
 271   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
 272   1       
 273   1           __delay_us(300);
 274   1       
 275   1           P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 276   1           P1 |= 0x30;           // Write 0x3
 277   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
 278   1       
 279   1           __delay_us(650);
 280   1       
 281   1           P1 &= 0x0F;           // Make P1.4 to P1.7 zero
 282   1           P1 |= 0x20;           // Write 0x2
 283   1           ToggleEpinOfLCD();    // Toggle E pin to send data 
 284   1       
 285   1           __delay_us(650);
 286   1       
 287   1         WriteCommandToLCD(0x28);    //function set
 288   1         
 289   1         WriteCommandToLCD(0x0c);    //display on,cursor off,blink off
 290   1         WriteCommandToLCD(0x01);    //clear display
 291   1         WriteCommandToLCD(0x06);    //entry mode, set increment
 292   1      }
 293           
 294          //Function for Writing String to LCD
 295          void WriteStringToLCD(const char *s)  
 296          {
 297   1          while(*s)
 298   1              WriteDataToLCD(*s++);   // print first character on LCD 
 299   1      }
 300           
 301          // Writing Function for Clear the LCD Screen and return cursor to zero position
 302          void ClearLCDScreen(void)       
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 6   

 303          {
 304   1          WriteCommandToLCD(0x01);    // Clear the screen
 305   1          __delay_us(2000);           // Delay for cursor to return at zero position
 306   1      }
 307          
 308          void Display(unsigned char Data)
 309          {
 310   1         switch(Data)
 311   1         {
 312   2            case 170:
 313   2               WriteStringToLCD("1KM");
 314   2            break;
 315   2            
 316   2            case 204:
 317   2                WriteStringToLCD("2KM");
 318   2               break;
 319   2               
 320   2            case 219:
 321   2                WriteStringToLCD("3KM");
 322   2               break;
 323   2               
 324   2            case 227:
 325   2                WriteStringToLCD("4KM");
 326   2               break;
 327   2               
 328   2            case 255:
 329   2                WriteStringToLCD("NF");
 330   2               break;
 331   2               
 332   2            default:
 333   2               break;
 334   2         }
 335   1       }
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 7   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 67
0000 E4                CLR     A
0001 F500        R     MOV     ADC_Value,A
                                           ; SOURCE LINE # 68
0003 7800        R     MOV     R0,#LOW Digit
0005 7C00        R     MOV     R4,#HIGH Digit
0007 FD                MOV     R5,A
0008 7BFF              MOV     R3,#0FFH
000A 7A00        R     MOV     R2,#HIGH _?ix1000
000C 7900        R     MOV     R1,#LOW _?ix1000
000E FE                MOV     R6,A
000F 7F03              MOV     R7,#03H
0011 1100        E     ACALL   ?C?COPY
                                           ; SOURCE LINE # 72
0013 1100        R     ACALL   InitADC
                                           ; SOURCE LINE # 73
0015 1100        R     ACALL   InitLCD
                                           ; SOURCE LINE # 74
0017 7BFF              MOV     R3,#0FFH
0019 7A00        R     MOV     R2,#HIGH ?SC_0
001B 7900        R     MOV     R1,#LOW ?SC_0
001D 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 75
001F 7F01              MOV     R7,#01H
0021 7E00              MOV     R6,#00H
0023 1100        R     ACALL   _delay_sec
                                           ; SOURCE LINE # 76
0025 1100        R     ACALL   ClearLCDScreen
                                           ; SOURCE LINE # 77
0027 7BFF              MOV     R3,#0FFH
0029 7A00        R     MOV     R2,#HIGH ?SC_12
002B 7900        R     MOV     R1,#LOW ?SC_12
002D 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 78
002F 120000      R     LCALL   L?0062
                                           ; SOURCE LINE # 79
0032 1100        R     ACALL   ClearLCDScreen
                                           ; SOURCE LINE # 80
0034 7BFF              MOV     R3,#0FFH
0036 7A00        R     MOV     R2,#HIGH ?SC_26
0038 7900        R     MOV     R1,#LOW ?SC_26
003A 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 81
003C 120000      R     LCALL   L?0062
                                           ; SOURCE LINE # 82
003F 1100        R     ACALL   ClearLCDScreen
0041         ?C0001:
                                           ; SOURCE LINE # 83
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0041 D292              SETB    RELAY1
                                           ; SOURCE LINE # 86
0043 7F01              MOV     R7,#01H
0045 7E00              MOV     R6,#00H
0047 1100        R     ACALL   _delay_sec
                                           ; SOURCE LINE # 87
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 8   

0049 7F01              MOV     R7,#01H
004B 1100        R     ACALL   _ReadADC
004D 8F00        R     MOV     ADC_Value,R7
                                           ; SOURCE LINE # 88
004F 7BFF              MOV     R3,#0FFH
0051 7A00        R     MOV     R2,#HIGH ?SC_42
0053 7900        R     MOV     R1,#LOW ?SC_42
0055 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 89
0057 AF00        R     MOV     R7,ADC_Value
0059 1100        R     ACALL   _Display
                                           ; SOURCE LINE # 90
005B 1100        R     ACALL   L?0063
                                           ; SOURCE LINE # 91
005D 1100        R     ACALL   ClearLCDScreen
                                           ; SOURCE LINE # 92
005F C292              CLR     RELAY1
                                           ; SOURCE LINE # 94
0061 D293              SETB    RELAY2
                                           ; SOURCE LINE # 95
0063 7F01              MOV     R7,#01H
0065 7E00              MOV     R6,#00H
0067 1100        R     ACALL   _delay_sec
                                           ; SOURCE LINE # 96
0069 7BFF              MOV     R3,#0FFH
006B 7A00        R     MOV     R2,#HIGH ?SC_46
006D 7900        R     MOV     R1,#LOW ?SC_46
006F 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 97
0071 7F01              MOV     R7,#01H
0073 1100        R     ACALL   _ReadADC
0075 8F00        R     MOV     ADC_Value,R7
                                           ; SOURCE LINE # 98
0077 1100        R     ACALL   _Display
                                           ; SOURCE LINE # 99
0079 1100        R     ACALL   L?0063
                                           ; SOURCE LINE # 100
007B 1100        R     ACALL   ClearLCDScreen
                                           ; SOURCE LINE # 101
007D C293              CLR     RELAY2
                                           ; SOURCE LINE # 103
007F D291              SETB    RELAY3
                                           ; SOURCE LINE # 104
0081 7F01              MOV     R7,#01H
0083 7E00              MOV     R6,#00H
0085 1100        R     ACALL   _delay_sec
                                           ; SOURCE LINE # 105
0087 7BFF              MOV     R3,#0FFH
0089 7A00        R     MOV     R2,#HIGH ?SC_50
008B 7900        R     MOV     R1,#LOW ?SC_50
008D 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 106
008F 7F01              MOV     R7,#01H
0091 1100        R     ACALL   _ReadADC
0093 8F00        R     MOV     ADC_Value,R7
                                           ; SOURCE LINE # 107
0095 1100        R     ACALL   _Display
                                           ; SOURCE LINE # 108
0097 1100        R     ACALL   L?0063
                                           ; SOURCE LINE # 109
0099 1100        R     ACALL   ClearLCDScreen
                                           ; SOURCE LINE # 110
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 9   

009B C291              CLR     RELAY3
                                           ; SOURCE LINE # 113
009D 80A2              SJMP    ?C0001
             ; FUNCTION main (END)

             ; FUNCTION InitADC (BEGIN)
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
                                           ; SOURCE LINE # 122
0000 C2A0              CLR     Add_A
                                           ; SOURCE LINE # 123
0002 C2A1              CLR     Add_B
                                           ; SOURCE LINE # 124
0004 C2A2              CLR     Add_C
                                           ; SOURCE LINE # 125
0006 C2A3              CLR     ALE
                                           ; SOURCE LINE # 126
0008 D2A4              SETB    EOC
                                           ; SOURCE LINE # 127
000A C2A5              CLR     OE
                                           ; SOURCE LINE # 128
000C C2A6              CLR     START
                                           ; SOURCE LINE # 129
000E C2A7              CLR     CLK
                                           ; SOURCE LINE # 130
0010 7580FF            MOV     P0,#0FFH
                                           ; SOURCE LINE # 131
0013 22                RET     
             ; FUNCTION InitADC (END)

             ; FUNCTION _ReadADC (BEGIN)
                                           ; SOURCE LINE # 133
;---- Variable 'Channel' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 135
0000 E4                CLR     A
0001 F500        R     MOV     i,A
0003 F500        R     MOV     i+01H,A
                                           ; SOURCE LINE # 136
0005 F500        R     MOV     ADC_value,A
0007 F500        R     MOV     ADC_value+01H,A
                                           ; SOURCE LINE # 140
0009 EF                MOV     A,R7
000A B40800            CJNE    A,#08H,?C0047
000D         ?C0047:
000D 5044              JNC     ?C0005
000F 900000      R     MOV     DPTR,#?C0048
0012 25E0              ADD     A,ACC
0014 73                JMP     @A+DPTR
0015         ?C0048:
0015 0100        R     AJMP    ?C0006
0017 0100        R     AJMP    ?C0007
0019 0100        R     AJMP    ?C0008
001B 0100        R     AJMP    ?C0009
001D 0100        R     AJMP    ?C0010
001F 0100        R     AJMP    ?C0011
0021 0100        R     AJMP    ?C0012
0023 0100        R     AJMP    ?C0013
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
0025         ?C0006:
0025 C2A2              CLR     Add_C
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 10  

0027 800E              SJMP    ?C0054
                                           ; SOURCE LINE # 143
0029         ?C0007:
0029 C2A2              CLR     Add_C
002B 8012              SJMP    ?C0055
                                           ; SOURCE LINE # 144
002D         ?C0008:
002D C2A2              CLR     Add_C
002F 8016              SJMP    ?C0056
                                           ; SOURCE LINE # 145
0031         ?C0009:
0031 C2A2              CLR     Add_C
0033 801A              SJMP    ?C0057
                                           ; SOURCE LINE # 146
0035         ?C0010:
0035 D2A2              SETB    Add_C
0037         ?C0054:
0037 C2A1              CLR     Add_B
0039 C2A0              CLR     Add_A
003B 8016              SJMP    ?C0005
                                           ; SOURCE LINE # 147
003D         ?C0011:
003D D2A2              SETB    Add_C
003F         ?C0055:
003F C2A1              CLR     Add_B
0041 D2A0              SETB    Add_A
0043 800E              SJMP    ?C0005
                                           ; SOURCE LINE # 148
0045         ?C0012:
0045 D2A2              SETB    Add_C
0047         ?C0056:
0047 D2A1              SETB    Add_B
0049 C2A0              CLR     Add_A
004B 8006              SJMP    ?C0005
                                           ; SOURCE LINE # 149
004D         ?C0013:
004D D2A2              SETB    Add_C
004F         ?C0057:
004F D2A1              SETB    Add_B
0051 D2A0              SETB    Add_A
                                           ; SOURCE LINE # 150
0053         ?C0005:
                                           ; SOURCE LINE # 152
0053 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 153
0055 D2A3              SETB    ALE
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0057 120000      R     LCALL   L?0058
                                           ; SOURCE LINE # 156
005A C2A7              CLR     CLK
                                           ; SOURCE LINE # 157
005C D2A6              SETB    START
                                           ; SOURCE LINE # 158
005E 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 159
0060 D2A7              SETB    CLK
                                           ; SOURCE LINE # 160
0062 C2A3              CLR     ALE
                                           ; SOURCE LINE # 161
0064 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 162
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 11  

0066 C2A7              CLR     CLK
                                           ; SOURCE LINE # 163
0068 C2A6              CLR     START
                                           ; SOURCE LINE # 165
006A E4                CLR     A
006B F500        R     MOV     i,A
006D F500        R     MOV     i+01H,A
006F         ?C0014:
                                           ; SOURCE LINE # 166
                                           ; SOURCE LINE # 167
006F B2A7              CPL     CLK
                                           ; SOURCE LINE # 168
0071 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 169
0073 30A411            JNB     EOC,?C0015
                                           ; SOURCE LINE # 170
0076         ?C0017:
                                           ; SOURCE LINE # 171
0076         ?C0016:
0076 0500        R     INC     i+01H
0078 E500        R     MOV     A,i+01H
007A 7002              JNZ     ?C0049
007C 0500        R     INC     i
007E         ?C0049:
007E C3                CLR     C
007F 94D0              SUBB    A,#0D0H
0081 E500        R     MOV     A,i
0083 9407              SUBB    A,#07H
0085 40E8              JC      ?C0014
0087         ?C0015:
                                           ; SOURCE LINE # 173
0087 E4                CLR     A
0088 F500        R     MOV     i,A
008A F500        R     MOV     i+01H,A
008C         ?C0018:
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
008C B2A7              CPL     CLK
                                           ; SOURCE LINE # 176
008E 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 177
0090 20A411            JB      EOC,?C0019
                                           ; SOURCE LINE # 178
0093         ?C0021:
                                           ; SOURCE LINE # 179
0093         ?C0020:
0093 0500        R     INC     i+01H
0095 E500        R     MOV     A,i+01H
0097 7002              JNZ     ?C0050
0099 0500        R     INC     i
009B         ?C0050:
009B C3                CLR     C
009C 94D0              SUBB    A,#0D0H
009E E500        R     MOV     A,i
00A0 9407              SUBB    A,#07H
00A2 40E8              JC      ?C0018
00A4         ?C0019:
                                           ; SOURCE LINE # 181
00A4 C2A7              CLR     CLK
                                           ; SOURCE LINE # 182
00A6 D2A5              SETB    OE
                                           ; SOURCE LINE # 183
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 12  

00A8 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
00AA 120000      R     LCALL   L?0058
                                           ; SOURCE LINE # 186
00AD C2A7              CLR     CLK
                                           ; SOURCE LINE # 187
00AF 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 188
00B1 D2A7              SETB    CLK
                                           ; SOURCE LINE # 189
00B3 AF80              MOV     R7,P0
00B5 750000      R     MOV     ADC_value,#00H
00B8 8F00        R     MOV     ADC_value+01H,R7
                                           ; SOURCE LINE # 190
00BA 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 191
00BC C2A5              CLR     OE
                                           ; SOURCE LINE # 192
00BE C2A7              CLR     CLK
                                           ; SOURCE LINE # 193
00C0 1100        R     ACALL   L?0059
                                           ; SOURCE LINE # 194
00C2 AF00        R     MOV     R7,ADC_value+01H
                                           ; SOURCE LINE # 195
00C4         ?C0022:
00C4 22                RET     
             ; FUNCTION _ReadADC (END)

             ; FUNCTION L?0062 (BEGIN)
0000         L?0063:
0000 7F02              MOV     R7,#02H
0002 7E00              MOV     R6,#00H
             ; FUNCTION _delay_sec (BEGIN)
                                           ; SOURCE LINE # 198
0004 8E00        R     MOV     d,R6
0006 8F00        R     MOV     d+01H,R7
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 201
0008 E4                CLR     A
0009 F500        R     MOV     i,A
000B F500        R     MOV     i+01H,A
000D         ?C0023:
000D AE00        R     MOV     R6,d
000F AF00        R     MOV     R7,d+01H
0011 7C00              MOV     R4,#00H
0013 7D14              MOV     R5,#014H
0015 1100        E     ACALL   ?C?IMUL
0017 C3                CLR     C
0018 E500        R     MOV     A,i+01H
001A 9F                SUBB    A,R7
001B E500        R     MOV     A,i
001D 9E                SUBB    A,R6
001E 5010              JNC     ?C0026
                                           ; SOURCE LINE # 202
0020 7F50              MOV     R7,#050H
0022 7EC3              MOV     R6,#0C3H
0024 1100        R     ACALL   ___delay_us
0026 0500        R     INC     i+01H
0028 E500        R     MOV     A,i+01H
002A 70E1              JNZ     ?C0023
002C 0500        R     INC     i
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 13  

002E         ?C0051:
002E 80DD              SJMP    ?C0023
                                           ; SOURCE LINE # 203
0030         ?C0026:
0030 22                RET     
             ; FUNCTION _delay_sec (END)

             ; FUNCTION L?0058 (BEGIN)
0000 D2A7              SETB    CLK
0002         L?0059:
0002 7F0A              MOV     R7,#0AH
0004 7E00              MOV     R6,#00H
             ; FUNCTION ___delay_us (BEGIN)
                                           ; SOURCE LINE # 206
;---- Variable 'd' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 207
                                           ; SOURCE LINE # 209
0006 7C00              MOV     R4,#00H
0008 7D0F              MOV     R5,#0FH
000A 1100        E     ACALL   ?C?UIDIV
;---- Variable 'limit' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 210
;---- Variable 'i' assigned to Register 'R4/R5' ----
000C E4                CLR     A
000D FD                MOV     R5,A
000E FC                MOV     R4,A
000F         ?C0027:
000F C3                CLR     C
0010 ED                MOV     A,R5
0011 9F                SUBB    A,R7
0012 EC                MOV     A,R4
0013 9E                SUBB    A,R6
0014 5007              JNC     ?C0030
0016 0D                INC     R5
0017 BD0001            CJNE    R5,#00H,?C0052
001A 0C                INC     R4
001B         ?C0052:
001B 80F2              SJMP    ?C0027
                                           ; SOURCE LINE # 211
001D         ?C0030:
001D 22                RET     
             ; FUNCTION ___delay_us (END)

             ; FUNCTION L?0060 (BEGIN)
0000         L?0061:
0000 1100        R     ACALL   ___delay_us
0002 53900F            ANL     P1,#0FH
0005 439030            ORL     P1,#030H
             ; FUNCTION ToggleEpinOfLCD (BEGIN)
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0008 D290              SETB    E
                                           ; SOURCE LINE # 216
000A 7FFA              MOV     R7,#0FAH
000C 7E00              MOV     R6,#00H
000E 1100        R     ACALL   ___delay_us
                                           ; SOURCE LINE # 217
0010 C290              CLR     E
                                           ; SOURCE LINE # 218
0012 7FFA              MOV     R7,#0FAH
0014 7E00              MOV     R6,#00H
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 14  

0016 0100        R     AJMP    ___delay_us
             ; FUNCTION ToggleEpinOfLCD (END)

             ; FUNCTION _WriteDataToLCD (BEGIN)
                                           ; SOURCE LINE # 222
;---- Variable 't' assigned to Register 'R3' ----
0000 AB07              MOV     R3,AR7
                                           ; SOURCE LINE # 223
                                           ; SOURCE LINE # 224
0002 D2B6              SETB    RS
                                           ; SOURCE LINE # 226
0004 53900F            ANL     P1,#0FH
                                           ; SOURCE LINE # 227
0007 EB                MOV     A,R3
0008 54F0              ANL     A,#0F0H
000A 4290              ORL     P1,A
                                           ; SOURCE LINE # 228
000C 1100        R     ACALL   ToggleEpinOfLCD
                                           ; SOURCE LINE # 230
000E 53900F            ANL     P1,#0FH
                                           ; SOURCE LINE # 231
0011 EB                MOV     A,R3
0012 C4                SWAP    A
0013 54F0              ANL     A,#0F0H
0015 4290              ORL     P1,A
                                           ; SOURCE LINE # 232
0017 0100        R     AJMP    ToggleEpinOfLCD
             ; FUNCTION _WriteDataToLCD (END)

             ; FUNCTION _WriteCommandToLCD (BEGIN)
                                           ; SOURCE LINE # 236
;---- Variable 'z' assigned to Register 'R2/R3' ----
0000 AB07              MOV     R3,AR7
0002 AA06              MOV     R2,AR6
                                           ; SOURCE LINE # 237
                                           ; SOURCE LINE # 238
0004 C2B6              CLR     RS
                                           ; SOURCE LINE # 240
0006 53900F            ANL     P1,#0FH
                                           ; SOURCE LINE # 241
0009 EB                MOV     A,R3
000A 54F0              ANL     A,#0F0H
000C 4290              ORL     P1,A
                                           ; SOURCE LINE # 242
000E 1100        R     ACALL   ToggleEpinOfLCD
                                           ; SOURCE LINE # 244
0010 53900F            ANL     P1,#0FH
                                           ; SOURCE LINE # 245
0013 AF03              MOV     R7,AR3
0015 EF                MOV     A,R7
0016 C4                SWAP    A
0017 54F0              ANL     A,#0F0H
0019 4290              ORL     P1,A
                                           ; SOURCE LINE # 246
001B 0100        R     AJMP    ToggleEpinOfLCD
             ; FUNCTION _WriteCommandToLCD (END)

             ; FUNCTION InitLCD (BEGIN)
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 254
0000 C2B6              CLR     RS
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 15  

                                           ; SOURCE LINE # 255
0002 C290              CLR     E
                                           ; SOURCE LINE # 258
0004 7F98              MOV     R7,#098H
0006 7E3A              MOV     R6,#03AH
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
                                           ; SOURCE LINE # 265
0008 120000      R     LCALL   L?0060
                                           ; SOURCE LINE # 267
000B 7F94              MOV     R7,#094H
000D 7E11              MOV     R6,#011H
                                           ; SOURCE LINE # 269
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
000F 120000      R     LCALL   L?0060
                                           ; SOURCE LINE # 273
0012 7F2C              MOV     R7,#02CH
0014 7E01              MOV     R6,#01H
                                           ; SOURCE LINE # 275
                                           ; SOURCE LINE # 276
                                           ; SOURCE LINE # 277
0016 1100        R     ACALL   L?0061
                                           ; SOURCE LINE # 279
0018 7F8A              MOV     R7,#08AH
001A 7E02              MOV     R6,#02H
001C 1100        R     ACALL   ___delay_us
                                           ; SOURCE LINE # 281
001E 53900F            ANL     P1,#0FH
                                           ; SOURCE LINE # 282
0021 439020            ORL     P1,#020H
                                           ; SOURCE LINE # 283
0024 1100        R     ACALL   ToggleEpinOfLCD
                                           ; SOURCE LINE # 285
0026 7F8A              MOV     R7,#08AH
0028 7E02              MOV     R6,#02H
002A 1100        R     ACALL   ___delay_us
                                           ; SOURCE LINE # 287
002C 7F28              MOV     R7,#028H
002E 7E00              MOV     R6,#00H
0030 1100        R     ACALL   _WriteCommandToLCD
                                           ; SOURCE LINE # 289
0032 7F0C              MOV     R7,#0CH
0034 7E00              MOV     R6,#00H
0036 1100        R     ACALL   _WriteCommandToLCD
                                           ; SOURCE LINE # 290
0038 7F01              MOV     R7,#01H
003A 7E00              MOV     R6,#00H
003C 1100        R     ACALL   _WriteCommandToLCD
                                           ; SOURCE LINE # 291
003E 7F06              MOV     R7,#06H
0040 7E00              MOV     R6,#00H
0042 0100        R     AJMP    _WriteCommandToLCD
             ; FUNCTION InitLCD (END)

             ; FUNCTION _WriteStringToLCD (BEGIN)
                                           ; SOURCE LINE # 295
0000 8B00        R     MOV     s,R3
0002 8A00        R     MOV     s+01H,R2
0004 8900        R     MOV     s+02H,R1
                                           ; SOURCE LINE # 296
0006         ?C0035:
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 16  

                                           ; SOURCE LINE # 297
0006 AB00        R     MOV     R3,s
0008 AA00        R     MOV     R2,s+01H
000A A900        R     MOV     R1,s+02H
000C 1100        E     ACALL   ?C?CLDPTR
000E 6011              JZ      ?C0037
                                           ; SOURCE LINE # 298
0010 0500        R     INC     s+02H
0012 E500        R     MOV     A,s+02H
0014 7002              JNZ     ?C0053
0016 0500        R     INC     s+01H
0018         ?C0053:
0018 14                DEC     A
0019 F9                MOV     R1,A
001A 1100        E     ACALL   ?C?CLDPTR
001C FF                MOV     R7,A
001D 1100        R     ACALL   _WriteDataToLCD
001F 80E5              SJMP    ?C0035
                                           ; SOURCE LINE # 299
0021         ?C0037:
0021 22                RET     
             ; FUNCTION _WriteStringToLCD (END)

             ; FUNCTION ClearLCDScreen (BEGIN)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 304
0000 7F01              MOV     R7,#01H
0002 7E00              MOV     R6,#00H
0004 1100        R     ACALL   _WriteCommandToLCD
                                           ; SOURCE LINE # 305
0006 7FD0              MOV     R7,#0D0H
0008 7E07              MOV     R6,#07H
000A 0100        R     AJMP    ___delay_us
             ; FUNCTION ClearLCDScreen (END)

             ; FUNCTION _Display (BEGIN)
                                           ; SOURCE LINE # 308
;---- Variable 'Data' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0000 EF                MOV     A,R7
0001 2434              ADD     A,#034H
0003 6018              JZ      ?C0041
0005 24F1              ADD     A,#0F1H
0007 601C              JZ      ?C0042
0009 24F8              ADD     A,#0F8H
000B 6020              JZ      ?C0043
000D 24E4              ADD     A,#0E4H
000F 6024              JZ      ?C0044
0011 2455              ADD     A,#055H
0013 7028              JNZ     ?C0046
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
0015         ?C0040:
                                           ; SOURCE LINE # 313
0015 7BFF              MOV     R3,#0FFH
0017 7A00        R     MOV     R2,#HIGH ?SC_54
0019 7900        R     MOV     R1,#LOW ?SC_54
001B 0100        R     AJMP    _WriteStringToLCD
                                           ; SOURCE LINE # 314
                                           ; SOURCE LINE # 316
C51 COMPILER V9.55   MAIN                                                                  05/31/2016 16:02:12 PAGE 17  

001D         ?C0041:
                                           ; SOURCE LINE # 317
001D 7BFF              MOV     R3,#0FFH
001F 7A00        R     MOV     R2,#HIGH ?SC_58
0021 7900        R     MOV     R1,#LOW ?SC_58
0023 0100        R     AJMP    _WriteStringToLCD
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0025         ?C0042:
                                           ; SOURCE LINE # 321
0025 7BFF              MOV     R3,#0FFH
0027 7A00        R     MOV     R2,#HIGH ?SC_62
0029 7900        R     MOV     R1,#LOW ?SC_62
002B 0100        R     AJMP    _WriteStringToLCD
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 324
002D         ?C0043:
                                           ; SOURCE LINE # 325
002D 7BFF              MOV     R3,#0FFH
002F 7A00        R     MOV     R2,#HIGH ?SC_66
0031 7900        R     MOV     R1,#LOW ?SC_66
0033 0100        R     AJMP    _WriteStringToLCD
                                           ; SOURCE LINE # 326
                                           ; SOURCE LINE # 328
0035         ?C0044:
                                           ; SOURCE LINE # 329
0035 7BFF              MOV     R3,#0FFH
0037 7A00        R     MOV     R2,#HIGH ?SC_70
0039 7900        R     MOV     R1,#LOW ?SC_70
003B 1100        R     ACALL   _WriteStringToLCD
                                           ; SOURCE LINE # 330
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 333
                                           ; SOURCE LINE # 334
                                           ; SOURCE LINE # 335
003D         ?C0046:
003D 22                RET     
             ; FUNCTION _Display (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    709    ----
   CONSTANT SIZE    =     76    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      15
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
